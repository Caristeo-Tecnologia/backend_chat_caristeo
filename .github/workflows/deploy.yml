name: Deploy to ECS

on:
  push:
    branches:
      - feat/deploy_new_version

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_URL: ${{ secrets.ECR_URL }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL

      - name: Build and push Docker image to ECR
        env:
          ECR_URL: ${{ secrets.ECR_URL }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          docker build -t chat_caristeo .
          docker tag chat_caristeo:latest $ECR_URL/chat_caristeo:latest
          docker push $ECR_URL/chat_caristeo:latest

      - name: Update ECS task definition
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_URL: ${{ secrets.ECR_URL }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REDIS_URI: ${{ secrets.REDIS_URI }}
        run: |
          CONTAINER_DEFINITIONS=$(jq -n \
            --arg ecr_url "$ECR_URL/chat_caristeo:latest" \
            --arg db_host "$DB_HOST" \
            --arg db_user "$DB_USER" \
            --arg db_pass "$DB_PASS" \
            --arg db_name "$DB_NAME" \
            --arg jwt_secret "$JWT_SECRET" \
            --arg redis_uri "$REDIS_URI" \
            '[
              {
                "name": "chat_caristeo",
                "image": $ecr_url,
                "essential": true,
                "memory": 512,
                "cpu": 256,
                "portMappings": [
                  {"containerPort": 9000, "hostPort": 9000, "protocol": "tcp"},
                  {"containerPort": 8080, "hostPort": 8080, "protocol": "tcp"}
                ],
                "environment": [
                  {"name": "NODE_ENV", "value": "production"},
                  {"name": "BACKEND_URL", "value": "http://localhost"},
                  {"name": "FRONTEND_URL", "value": "https://main.d1usb2ouxvps6t.amplifyapp.com"},
                  {"name": "PROXY_PORT", "value": "8080"},
                  {"name": "PORT", "value": "9000"},
                  {"name": "DB_DIALECT", "value": "postgres"},
                  {"name": "DB_HOST", "value": $db_host},
                  {"name": "DB_PORT", "value": "5432"},
                  {"name": "DB_USER", "value": $db_user},
                  {"name": "DB_PASS", "value": $db_pass},
                  {"name": "DB_NAME", "value": $db_name},
                  {"name": "JWT_SECRET", "value": $jwt_secret},
                  {"name": "REDIS_URI", "value": $redis_uri}
                ]
              }
            ]')

          NEW_TASK_REVISION=$(aws ecs register-task-definition \
            --family chat_caristeo_task \
            --network-mode awsvpc \
            --container-definitions "$CONTAINER_DEFINITIONS" \
            --requires-compatibilities FARGATE \
            --cpu "256" \
            --memory "512" \
            --execution-role-arn arn:aws:iam::861276092440:role/ecsTaskExecutionRole \
            --task-role-arn arn:aws:iam::861276092440:role/ecsTaskExecutionRole \
            --query 'taskDefinition.revision' --output text)

          echo "New task revision: $NEW_TASK_REVISION"
          echo "::set-output name=new_task_revision::$NEW_TASK_REVISION"

      - name: Create or update ECS service
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          SERVICE_NAME="chat_caristeo_service01"
          CLUSTER_NAME="chat_caristeo_cluster"

          NEW_TASK_REVISION="${{ steps.update_task.outputs.new_task_revision }}"
          echo "New task revision ao executar o servi√ßo: $NEW_TASK_REVISION"

          # Check if the service exists
          SERVICE_EXISTS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].serviceArn" --output text)

          if [ "$SERVICE_EXISTS" == "None" ]; then
            echo "Creating new ECS service..."
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition chat_caristeo_task:${NEW_TASK_REVISION} \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-0526bb332d7e9171b,subnet-0b3bef5cb7ac09f45,subnet-00a6d305981ceab17],securityGroups=[sg-064f90788739ccf79],assignPublicIp=ENABLED}"
          else
            echo "Updating existing ECS service..."
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --task-definition chat_caristeo_task:${NEW_TASK_REVISION} \
              --force-new-deployment
          fi
